// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/smeruelo/glow/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Create provides a mock function with given fields: project
func (_m *Store) Create(project model.Project) error {
	ret := _m.Called(project)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Store) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Store) Get(id string) (model.Project, error) {
	ret := _m.Called(id)

	var r0 model.Project
	if rf, ok := ret.Get(0).(func(string) model.Project); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Store) GetAll() ([]model.Project, error) {
	ret := _m.Called()

	var r0 []model.Project
	if rf, ok := ret.Get(0).(func() []model.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAchieved provides a mock function with given fields: id, time
func (_m *Store) UpdateAchieved(id string, time int) (model.Project, error) {
	ret := _m.Called(id, time)

	var r0 model.Project
	if rf, ok := ret.Get(0).(func(string, int) model.Project); ok {
		r0 = rf(id, time)
	} else {
		r0 = ret.Get(0).(model.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(id, time)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
