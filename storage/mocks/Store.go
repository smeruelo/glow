// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/smeruelo/glow/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: p
func (_m *Store) CreateProject(p model.Project) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Project) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: pID, uID
func (_m *Store) DeleteProject(pID string, uID string) error {
	ret := _m.Called(pID, uID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(pID, uID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProject provides a mock function with given fields: pID
func (_m *Store) GetProject(pID string) (model.Project, error) {
	ret := _m.Called(pID)

	var r0 model.Project
	if rf, ok := ret.Get(0).(func(string) model.Project); ok {
		r0 = rf(pID)
	} else {
		r0 = ret.Get(0).(model.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProjects provides a mock function with given fields: uID
func (_m *Store) GetUserProjects(uID string) ([]model.Project, error) {
	ret := _m.Called(uID)

	var r0 []model.Project
	if rf, ok := ret.Get(0).(func(string) []model.Project); ok {
		r0 = rf(uID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: pID, np
func (_m *Store) UpdateProject(pID string, np model.NewProject) (model.Project, error) {
	ret := _m.Called(pID, np)

	var r0 model.Project
	if rf, ok := ret.Get(0).(func(string, model.NewProject) model.Project); ok {
		r0 = rf(pID, np)
	} else {
		r0 = ret.Get(0).(model.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, model.NewProject) error); ok {
		r1 = rf(pID, np)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
